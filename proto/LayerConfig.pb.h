// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LayerConfig.proto

#ifndef PROTOBUF_LayerConfig_2eproto__INCLUDED
#define PROTOBUF_LayerConfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace cHasky {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_LayerConfig_2eproto();
void protobuf_AssignDesc_LayerConfig_2eproto();
void protobuf_ShutdownFile_LayerConfig_2eproto();

class ActivateConfig;
class LayerConfig;

enum ActivateConfig_Type {
  ActivateConfig_Type_EQUAL = 0,
  ActivateConfig_Type_SIGMOID = 1,
  ActivateConfig_Type_TANH = 2
};
bool ActivateConfig_Type_IsValid(int value);
const ActivateConfig_Type ActivateConfig_Type_Type_MIN = ActivateConfig_Type_EQUAL;
const ActivateConfig_Type ActivateConfig_Type_Type_MAX = ActivateConfig_Type_TANH;
const int ActivateConfig_Type_Type_ARRAYSIZE = ActivateConfig_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* ActivateConfig_Type_descriptor();
inline const ::std::string& ActivateConfig_Type_Name(ActivateConfig_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    ActivateConfig_Type_descriptor(), value);
}
inline bool ActivateConfig_Type_Parse(
    const ::std::string& name, ActivateConfig_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ActivateConfig_Type>(
    ActivateConfig_Type_descriptor(), name, value);
}
// ===================================================================

class ActivateConfig : public ::google::protobuf::Message {
 public:
  ActivateConfig();
  virtual ~ActivateConfig();

  ActivateConfig(const ActivateConfig& from);

  inline ActivateConfig& operator=(const ActivateConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ActivateConfig& default_instance();

  void Swap(ActivateConfig* other);

  // implements Message ----------------------------------------------

  ActivateConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActivateConfig& from);
  void MergeFrom(const ActivateConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ActivateConfig_Type Type;
  static const Type EQUAL = ActivateConfig_Type_EQUAL;
  static const Type SIGMOID = ActivateConfig_Type_SIGMOID;
  static const Type TANH = ActivateConfig_Type_TANH;
  static inline bool Type_IsValid(int value) {
    return ActivateConfig_Type_IsValid(value);
  }
  static const Type Type_MIN =
    ActivateConfig_Type_Type_MIN;
  static const Type Type_MAX =
    ActivateConfig_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    ActivateConfig_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return ActivateConfig_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return ActivateConfig_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return ActivateConfig_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .cHasky.ActivateConfig.Type type = 1 [default = EQUAL];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::cHasky::ActivateConfig_Type type() const;
  inline void set_type(::cHasky::ActivateConfig_Type value);

  // @@protoc_insertion_point(class_scope:cHasky.ActivateConfig)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int type_;
  friend void  protobuf_AddDesc_LayerConfig_2eproto();
  friend void protobuf_AssignDesc_LayerConfig_2eproto();
  friend void protobuf_ShutdownFile_LayerConfig_2eproto();

  void InitAsDefaultInstance();
  static ActivateConfig* default_instance_;
};
// -------------------------------------------------------------------

class LayerConfig : public ::google::protobuf::Message {
 public:
  LayerConfig();
  virtual ~LayerConfig();

  LayerConfig(const LayerConfig& from);

  inline LayerConfig& operator=(const LayerConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LayerConfig& default_instance();

  void Swap(LayerConfig* other);

  // implements Message ----------------------------------------------

  LayerConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LayerConfig& from);
  void MergeFrom(const LayerConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required .cHasky.ActivateConfig activate_config = 2;
  inline bool has_activate_config() const;
  inline void clear_activate_config();
  static const int kActivateConfigFieldNumber = 2;
  inline const ::cHasky::ActivateConfig& activate_config() const;
  inline ::cHasky::ActivateConfig* mutable_activate_config();
  inline ::cHasky::ActivateConfig* release_activate_config();
  inline void set_allocated_activate_config(::cHasky::ActivateConfig* activate_config);

  // optional int32 size = 3;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 3;
  inline ::google::protobuf::int32 size() const;
  inline void set_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cHasky.LayerConfig)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_activate_config();
  inline void clear_has_activate_config();
  inline void set_has_size();
  inline void clear_has_size();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::cHasky::ActivateConfig* activate_config_;
  ::google::protobuf::int32 size_;
  friend void  protobuf_AddDesc_LayerConfig_2eproto();
  friend void protobuf_AssignDesc_LayerConfig_2eproto();
  friend void protobuf_ShutdownFile_LayerConfig_2eproto();

  void InitAsDefaultInstance();
  static LayerConfig* default_instance_;
};
// ===================================================================


// ===================================================================

// ActivateConfig

// required .cHasky.ActivateConfig.Type type = 1 [default = EQUAL];
inline bool ActivateConfig::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActivateConfig::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ActivateConfig::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ActivateConfig::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::cHasky::ActivateConfig_Type ActivateConfig::type() const {
  // @@protoc_insertion_point(field_get:cHasky.ActivateConfig.type)
  return static_cast< ::cHasky::ActivateConfig_Type >(type_);
}
inline void ActivateConfig::set_type(::cHasky::ActivateConfig_Type value) {
  assert(::cHasky::ActivateConfig_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:cHasky.ActivateConfig.type)
}

// -------------------------------------------------------------------

// LayerConfig

// required string name = 1;
inline bool LayerConfig::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LayerConfig::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LayerConfig::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LayerConfig::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& LayerConfig::name() const {
  // @@protoc_insertion_point(field_get:cHasky.LayerConfig.name)
  return *name_;
}
inline void LayerConfig::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:cHasky.LayerConfig.name)
}
inline void LayerConfig::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:cHasky.LayerConfig.name)
}
inline void LayerConfig::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cHasky.LayerConfig.name)
}
inline ::std::string* LayerConfig::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:cHasky.LayerConfig.name)
  return name_;
}
inline ::std::string* LayerConfig::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LayerConfig::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:cHasky.LayerConfig.name)
}

// required .cHasky.ActivateConfig activate_config = 2;
inline bool LayerConfig::has_activate_config() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LayerConfig::set_has_activate_config() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LayerConfig::clear_has_activate_config() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LayerConfig::clear_activate_config() {
  if (activate_config_ != NULL) activate_config_->::cHasky::ActivateConfig::Clear();
  clear_has_activate_config();
}
inline const ::cHasky::ActivateConfig& LayerConfig::activate_config() const {
  // @@protoc_insertion_point(field_get:cHasky.LayerConfig.activate_config)
  return activate_config_ != NULL ? *activate_config_ : *default_instance_->activate_config_;
}
inline ::cHasky::ActivateConfig* LayerConfig::mutable_activate_config() {
  set_has_activate_config();
  if (activate_config_ == NULL) activate_config_ = new ::cHasky::ActivateConfig;
  // @@protoc_insertion_point(field_mutable:cHasky.LayerConfig.activate_config)
  return activate_config_;
}
inline ::cHasky::ActivateConfig* LayerConfig::release_activate_config() {
  clear_has_activate_config();
  ::cHasky::ActivateConfig* temp = activate_config_;
  activate_config_ = NULL;
  return temp;
}
inline void LayerConfig::set_allocated_activate_config(::cHasky::ActivateConfig* activate_config) {
  delete activate_config_;
  activate_config_ = activate_config;
  if (activate_config) {
    set_has_activate_config();
  } else {
    clear_has_activate_config();
  }
  // @@protoc_insertion_point(field_set_allocated:cHasky.LayerConfig.activate_config)
}

// optional int32 size = 3;
inline bool LayerConfig::has_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LayerConfig::set_has_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LayerConfig::clear_has_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LayerConfig::clear_size() {
  size_ = 0;
  clear_has_size();
}
inline ::google::protobuf::int32 LayerConfig::size() const {
  // @@protoc_insertion_point(field_get:cHasky.LayerConfig.size)
  return size_;
}
inline void LayerConfig::set_size(::google::protobuf::int32 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:cHasky.LayerConfig.size)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace cHasky

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::cHasky::ActivateConfig_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cHasky::ActivateConfig_Type>() {
  return ::cHasky::ActivateConfig_Type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_LayerConfig_2eproto__INCLUDED
