// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LayerConfig.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "LayerConfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cHasky {

namespace {

const ::google::protobuf::Descriptor* ActivateConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivateConfig_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ActivateConfig_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* LayerConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LayerConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_LayerConfig_2eproto() {
  protobuf_AddDesc_LayerConfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "LayerConfig.proto");
  GOOGLE_CHECK(file != NULL);
  ActivateConfig_descriptor_ = file->message_type(0);
  static const int ActivateConfig_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivateConfig, type_),
  };
  ActivateConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivateConfig_descriptor_,
      ActivateConfig::default_instance_,
      ActivateConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivateConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivateConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivateConfig));
  ActivateConfig_Type_descriptor_ = ActivateConfig_descriptor_->enum_type(0);
  LayerConfig_descriptor_ = file->message_type(1);
  static const int LayerConfig_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerConfig, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerConfig, activate_config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerConfig, size_),
  };
  LayerConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LayerConfig_descriptor_,
      LayerConfig::default_instance_,
      LayerConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LayerConfig));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_LayerConfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivateConfig_descriptor_, &ActivateConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LayerConfig_descriptor_, &LayerConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_LayerConfig_2eproto() {
  delete ActivateConfig::default_instance_;
  delete ActivateConfig_reflection_;
  delete LayerConfig::default_instance_;
  delete LayerConfig_reflection_;
}

void protobuf_AddDesc_LayerConfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021LayerConfig.proto\022\006cHasky\"l\n\016ActivateC"
    "onfig\0220\n\004type\030\001 \002(\0162\033.cHasky.ActivateCon"
    "fig.Type:\005EQUAL\"(\n\004Type\022\t\n\005EQUAL\020\000\022\013\n\007SI"
    "GMOID\020\001\022\010\n\004TANH\020\002\"Z\n\013LayerConfig\022\014\n\004name"
    "\030\001 \002(\t\022/\n\017activate_config\030\002 \002(\0132\026.cHasky"
    ".ActivateConfig\022\014\n\004size\030\003 \001(\005", 229);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "LayerConfig.proto", &protobuf_RegisterTypes);
  ActivateConfig::default_instance_ = new ActivateConfig();
  LayerConfig::default_instance_ = new LayerConfig();
  ActivateConfig::default_instance_->InitAsDefaultInstance();
  LayerConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_LayerConfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_LayerConfig_2eproto {
  StaticDescriptorInitializer_LayerConfig_2eproto() {
    protobuf_AddDesc_LayerConfig_2eproto();
  }
} static_descriptor_initializer_LayerConfig_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* ActivateConfig_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivateConfig_Type_descriptor_;
}
bool ActivateConfig_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ActivateConfig_Type ActivateConfig::EQUAL;
const ActivateConfig_Type ActivateConfig::SIGMOID;
const ActivateConfig_Type ActivateConfig::TANH;
const ActivateConfig_Type ActivateConfig::Type_MIN;
const ActivateConfig_Type ActivateConfig::Type_MAX;
const int ActivateConfig::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ActivateConfig::kTypeFieldNumber;
#endif  // !_MSC_VER

ActivateConfig::ActivateConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cHasky.ActivateConfig)
}

void ActivateConfig::InitAsDefaultInstance() {
}

ActivateConfig::ActivateConfig(const ActivateConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cHasky.ActivateConfig)
}

void ActivateConfig::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivateConfig::~ActivateConfig() {
  // @@protoc_insertion_point(destructor:cHasky.ActivateConfig)
  SharedDtor();
}

void ActivateConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActivateConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivateConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivateConfig_descriptor_;
}

const ActivateConfig& ActivateConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LayerConfig_2eproto();
  return *default_instance_;
}

ActivateConfig* ActivateConfig::default_instance_ = NULL;

ActivateConfig* ActivateConfig::New() const {
  return new ActivateConfig;
}

void ActivateConfig::Clear() {
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActivateConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cHasky.ActivateConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .cHasky.ActivateConfig.Type type = 1 [default = EQUAL];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::cHasky::ActivateConfig_Type_IsValid(value)) {
            set_type(static_cast< ::cHasky::ActivateConfig_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cHasky.ActivateConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cHasky.ActivateConfig)
  return false;
#undef DO_
}

void ActivateConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cHasky.ActivateConfig)
  // required .cHasky.ActivateConfig.Type type = 1 [default = EQUAL];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cHasky.ActivateConfig)
}

::google::protobuf::uint8* ActivateConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cHasky.ActivateConfig)
  // required .cHasky.ActivateConfig.Type type = 1 [default = EQUAL];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cHasky.ActivateConfig)
  return target;
}

int ActivateConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .cHasky.ActivateConfig.Type type = 1 [default = EQUAL];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivateConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivateConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivateConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivateConfig::MergeFrom(const ActivateConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActivateConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivateConfig::CopyFrom(const ActivateConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivateConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ActivateConfig::Swap(ActivateConfig* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActivateConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivateConfig_descriptor_;
  metadata.reflection = ActivateConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LayerConfig::kNameFieldNumber;
const int LayerConfig::kActivateConfigFieldNumber;
const int LayerConfig::kSizeFieldNumber;
#endif  // !_MSC_VER

LayerConfig::LayerConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cHasky.LayerConfig)
}

void LayerConfig::InitAsDefaultInstance() {
  activate_config_ = const_cast< ::cHasky::ActivateConfig*>(&::cHasky::ActivateConfig::default_instance());
}

LayerConfig::LayerConfig(const LayerConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cHasky.LayerConfig)
}

void LayerConfig::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  activate_config_ = NULL;
  size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LayerConfig::~LayerConfig() {
  // @@protoc_insertion_point(destructor:cHasky.LayerConfig)
  SharedDtor();
}

void LayerConfig::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
    delete activate_config_;
  }
}

void LayerConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LayerConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LayerConfig_descriptor_;
}

const LayerConfig& LayerConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LayerConfig_2eproto();
  return *default_instance_;
}

LayerConfig* LayerConfig::default_instance_ = NULL;

LayerConfig* LayerConfig::New() const {
  return new LayerConfig;
}

void LayerConfig::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_activate_config()) {
      if (activate_config_ != NULL) activate_config_->::cHasky::ActivateConfig::Clear();
    }
    size_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LayerConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cHasky.LayerConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_activate_config;
        break;
      }

      // required .cHasky.ActivateConfig activate_config = 2;
      case 2: {
        if (tag == 18) {
         parse_activate_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_activate_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_size;
        break;
      }

      // optional int32 size = 3;
      case 3: {
        if (tag == 24) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cHasky.LayerConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cHasky.LayerConfig)
  return false;
#undef DO_
}

void LayerConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cHasky.LayerConfig)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required .cHasky.ActivateConfig activate_config = 2;
  if (has_activate_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->activate_config(), output);
  }

  // optional int32 size = 3;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->size(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cHasky.LayerConfig)
}

::google::protobuf::uint8* LayerConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cHasky.LayerConfig)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required .cHasky.ActivateConfig activate_config = 2;
  if (has_activate_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->activate_config(), target);
  }

  // optional int32 size = 3;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->size(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cHasky.LayerConfig)
  return target;
}

int LayerConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required .cHasky.ActivateConfig activate_config = 2;
    if (has_activate_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->activate_config());
    }

    // optional int32 size = 3;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LayerConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LayerConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LayerConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LayerConfig::MergeFrom(const LayerConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_activate_config()) {
      mutable_activate_config()->::cHasky::ActivateConfig::MergeFrom(from.activate_config());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LayerConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LayerConfig::CopyFrom(const LayerConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LayerConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_activate_config()) {
    if (!this->activate_config().IsInitialized()) return false;
  }
  return true;
}

void LayerConfig::Swap(LayerConfig* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(activate_config_, other->activate_config_);
    std::swap(size_, other->size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LayerConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LayerConfig_descriptor_;
  metadata.reflection = LayerConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace cHasky

// @@protoc_insertion_point(global_scope)
