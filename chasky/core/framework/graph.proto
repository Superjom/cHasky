syntax = "proto3";

package chasky;

import "chasky/core/framework/types.proto";
import "chasky/core/framework/function.proto";
import "chasky/core/framework/attr_value.proto";
import "chasky/core/framework/data_provider.proto";

enum TaskType {
  FORWARD = 0;
  BACKWARD = 1;
}

message GraphDef {
  // Name of the Graph
  string name = 1;


  DataProviderDef data_provider = 2;

  repeated NodeDef nodes = 3;
  // Each input is "node:src_ouput" with "node" being a string name and
  // src_output being the name of node's output
  // repeated string input = 6;
  repeated EdgeDef edges = 6;
}

// A Node is the container of a function.
message NodeDef {
  // The name given to this layer
  string name = 1;

  bool is_source = 2;

  bool is_end = 3;

  // The function's signature, should be the format like: "%s:%d" % (def_name, datatype)
  string signature = 4;

  // mixed node's and functioin' attributes
  map<string, AttrValue> attr = 7;

  // These fields are extracted from `signature` field. Should be inited in Node's construction.
  string def_name = 8;
  DataType dtype = 9;
}

// An Edge is the connection between two nodes.
message EdgeDef {
  // source node
  string src_node = 1;
  // source node's argument name
  string src_arg = 2;
  // target node
  string trg_node = 3;
  // target node's argument
  string trg_arg = 4;
  // FORWARD or BACKWARD
  TaskType mode = 5;
  // edge's signature, format like "{src_node}:{src_arg}->{trg_node}:{trg_arg}
  // will generate automatically.
  string signature_ = 6;
}